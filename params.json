{"name":"Jasper Engine 2D","tagline":"An Object-Behavior Based 2D Game Engine for Javascript.","body":"\r\n\r\n## Overview\r\n\r\n**Jasper 2D**, an object-behavior based game engine that allows game devs to share their custom defined behaviors among other *game developers* to provide a new social aspect towards gaem development.\r\n\r\n### How it works\r\n\r\n**Jasper 2D** consists of two main components:\r\n\r\n* #####Objects\r\n\t* Objects in Jasper have a logical existence. \r\n\t* They do not have any behavior associated with them initially. \r\n\t* They can be tagged with a name for reference.\r\n\t* In short,\r\n\r\n\t> An Object is a logical entity and can be composed of any number of Behaviors\r\n\t\r\n* #####Behaviors \r\n\t* Behaviors give character to an object. \r\n\t* They define an object, how it looks, what it does, how it does it, how it handles events, etc. \r\n \t* In short, \r\n\r\n\t> A Mix of Behaviors Define an Object in the game.\r\n\t\r\n\r\n#####Example\r\n```javascript\r\nvar hero = new Jasper.Object(\"hero\"); \t\r\nhero.addBehavior(\"moveAround\");\r\n```\r\n        \r\n--- \r\n#### Other Components\r\n\r\n* #####Core\r\n\t* The Jasper.Core object is the main engine object that takes care of the game loop, all the scenes, layers and objects within it.\r\n\t* init() must be called on the core to start off the engine.\r\n\t\r\n ```javascript\r\n\tvar gameCore = new Jasper.Core({\r\n        canvasHeight: 1200,\r\n        canvasWidth: 1000,\r\n        container: \"container\"\r\n    }).init();\r\n    ```\r\n* #####Scene\r\n\t* The Jasper.Scene forms the next level of heirarchy.\r\n\t* This splits the game into independent scenes each having its own layers.\r\n\t* Only one scene can be run at a time.\r\n\t\r\n\t```javascript\r\n\tvar gameScene = new Jasper.Scene({\r\n        name: \"main\",\r\n        worldW: 1200,\r\n        worldH: 1000,\r\n    });\r\n\t```\r\n\t\r\n    gameCore.addScene(gameScene).startScene(gameScene);\r\n* #####Layer\r\n\t* The Jasper.Layer acts a container for all objects that are supposed to be in the same z-level. \r\n\t* This is because the order of rendering of layers are in the same order that they have been added to Scene.\r\n\t\r\n\t```javascript\r\n\tvar arenaLayer = new Jasper.Layer({\r\n        name:\"arena\"\r\n        });\r\n\tgameScene.addLayer(arenaLayer);\r\n    ```\r\n    \r\n#### Phew... Now let's make something\r\n\r\nLet's get started working with Jasper 2D!!! [On to the tutorial][tut] !!!\r\n\r\n\r\n[tut]: http://judenaveenraj.github.io/JasperEngine-2D/tutorial.html\r\n\r\n\r\n\r\n***\r\n\r\n# Jasper Engine 2D\r\n\r\n## Lets have some fun now!\r\n\r\nWe are going to start off with something to teach you the basics of object-behavior manipulation.\r\n\r\nIn this tutorial, we will make a scene where a number of object are going to be constantly chasing the mouse. We'll introduce new variations as we go through the tutorial.\r\n\r\n\r\n###Before we begin\r\nMake sure to have done the following:\r\n\r\n1.\tCreate a html page with a \\<div> having *id* = 'container' <br />\r\n```html\r\n\t<div id=\"container\">\r\n\t</div>\r\n```\r\n\r\n2.\tInclude the jasperengine.js or jasperengine.min.js <br />\r\n```html\r\n\t<script src=\"(path_to_js)/jasperengine.js\" ></script>\r\n```\r\n---\r\n\r\n### Creating the core\r\n\r\nLets start off by creating a core object. This is done by constructing a new Jasper.Core object by passing an argument object containing:\r\n\t\r\n1.\t*canvasHeight* : Height of the canvas to be created.\r\n2.\t*canvasWidth* : Width of the canvas to be created.\r\n3.\t*container* : The name of the \\<div> inside which the canvas is to be created.\r\n\r\n\r\nAfter creating the *gameCore* object, init() must be called on it to start the JasperEngine game loop.\r\n\r\n> init() must be called during the creation of Jasper.Core object. However it can be paused and resume anytime later.\r\n\r\n\r\n```javascript\r\n\r\nvar gameCore = new Jasper.Core({\r\n        canvasHeight: 800,\r\n        canvasWidth: 1000,\r\n        container: \"container\"\r\n    }).init();\r\n    \r\n```\r\n\r\n---\r\n\r\n### Getting the heirarchy up\r\n\r\n**First, let's create the main game Scene** which will contain our layers in the game. However in this game, we only have one layer.\r\n\r\nWe can create a Jasper.Scene by passing in an object with the following:\r\n\r\n1.\t*name* : The name of the scene, juz so we can use it later\r\n2.\t*worldW* : The width of the entire world in this scene, even the off-canvas area.\r\n3.\t*worldH* : The hieght of the entire world in this scene, even the off-canvas area.\r\n\r\nFinally add the scene to the gameCore object and start it. However there is nothing for the engine to display right now.\r\n\r\n\r\n```javascript\r\n\r\n\tvar gameScene = new Jasper.Scene({\r\n        name: \"main\",\r\n        worldW: 800,\r\n        worldH: 1000,\r\n    });\r\n    gameCore.addScene(gameScene).startScene(gameScene);\r\n    \r\n```\r\n\r\n\r\n---\r\n\r\n**Now it's time to get our Layer up.** Remember, from here onwards in the heirarchy, \r\n> The order in which you add layers to scenes or add objects to layers play a role in determining their z-level. \r\n\r\n> Each the objects in one layer are at a different z-level relative to the objects in the another layer.\r\n\r\n**Let's create a Jasper.Layer** ,with the name \"arena\", by passing in an object with the following:\r\n\r\n*\t*name* : The name of the scene, juz so we can use it later\r\n\r\nThen, add the layer to the scene. This makes the layer as the innermost layer in the scene. Since we have only one layer, it doesnt matter now.\r\n\t\r\n\t```\tjavascript\r\n\t\r\n\tvar arenaLayer = new Jasper.Layer({name:\"arena\"});\r\n\tgameScene.addLayer(arenaLayer);\r\n\t\r\n    ```\r\n\r\n---\r\n### Rise my minions!\r\n\r\nLet's bring in these bad boys:\r\n\r\n<img src=\"http://judenaveenraj.github.io/JasperEngine-2D/images/evil.png\" height=128 width=128/>\r\n\r\n***[Download the image](http://judenaveenraj.github.io/JasperEngine-2D/images/evil.png) and keep it in '/img/'*** as ***'evil.png'***\r\n\r\nFirst we need to create an object:\r\n\r\n```javascript\r\n\r\n\tvar evilface = new Jasper.Object(\"evilface\");\r\n\t\r\n```\r\n\r\n\r\n> At this point, the object is almost nothing.\r\n\r\nSo let's add a sprite behavior to give it some visual evilness!!! \r\n\r\n```javascript\r\n\tevilface.addBehavior(\"sprite\").setSprite(\"../img/evil.png\").setHeight(30).setWidth(30);\r\n```\r\n\r\nThats awesome but we can't have any fun with one evilface, we need a lot more!!! A hundred seems fair enough!\r\n\r\n```javascript\r\n\r\n\tfor(i=0;i<10;i++){\r\n        for(j=0;j<10;j++){\r\n        var evilface = new Jasper.Object(\"evilface\");\r\n        evilface.setPos(i*50,j*50);\r\n        evilface.addBehavior(\"sprite\").setSprite(\"../img/evil.png\").setHeight(30).setWidth(30);\r\n        arenaLayer.addObject(evilface);\r\n        }\r\n    }\r\n    \r\n```\r\n\r\n### Show two ways of creating the behavior for sprite here\r\n\r\n***Run the file.***\r\n\r\nSeems like the evilfaces are not so evil… THEY ARENT MOVING YET.\r\n\r\n[I guess it's time for a custom behavior now!!! Continue Tutorial...](http://judenaveenraj.github.io/JasperEngine-2D/tutorial2.html)\r\n\r\n# Jasper Engine 2D\r\n\r\n## Time to Customize!!!\r\n\r\n#####So let's make our first custom behavior. How bout we call it \"chaseMe\" !\r\n\r\n```javascript\r\n\r\n\tvar mouseManager = gameCore.getMouseManager();\r\n\t\r\n\tgameCore.createBehavior(\"chaseMe\",{},{\r\n            onUpdate: function(dt){\r\n                parent=this.getParentObject();\r\n                pos = parent.getPos();\r\n                var mousePos = mouseManager.getMousePos();\r\n\r\n                var dist = Math.sqrt(Math.pow(mousePos[0]-pos[0],2)+Math.pow(mousePos[1]-pos[1],2));\r\n                parent.setPosX(parent.getPosX() + ((mousePos[0]-pos[0])/dist*2.0));\r\n                parent.setPosY(parent.getPosY() + ((mousePos[1]-pos[1])/dist*2.0));\r\n            }\r\n\r\n    });\r\n```\r\n\r\n\r\nDon't freak out! Its not that hard… Now, let me explain the above code.\r\n\r\n\r\n###Custom Behaviors\r\n\r\n1.\tFirst, a custom is behavior is created using the syntax\r\n\r\n```javascript\r\n\tgameCore.createBehavior( <the name of the behavior>,\r\n\t\t\t\t\t\t  <an object with the local variables it needs>,\r\n\t\t\t\t\t\t  <an object with the functions that it uses> );\r\n\t\t\t\t\t\t  \r\n```\r\n\r\n> ###Inside any of the custom behavior function definitions, this.getParentObject() will return the object to which it is attached.\r\n\r\n**Note**: use '*this*' operator to access the functions and variables of the behavior itself, including the ones that were declared in the object above.\r\n\r\n2. The new behavior defined has functions that can be overridden:\r\n\t*\tonInit\r\n\t*\tonUpdate\r\n\t*\tonRemove\r\n\t\r\n\tSo we override the onUpdate because the mouse must be tracked during every frame update.\r\n\t\r\n3. We need to get the mouse coordinates on-demand. Hence we can obtain the MouseManager from the gameCore and can call the getMousePos() on that object.\r\n\r\n4. The following is a simple vector normalisation of the vector between the current object position and the mouse position. (ignore this for now, if you don't get it. Just know that this piece of code simply performs some math that serves to move the object)\r\n\r\n```javascript\r\n\tvar dist = Math.sqrt(Math.pow(mousePos[0]-pos[0],2)+Math.pow(mousePos[1]-pos[1],2));\r\n                parent.setPosX(parent.getPosX() + ((mousePos[0]-pos[0])/dist*2.0));\r\n                parent.setPosY(parent.getPosY() + ((mousePos[1]-pos[1])/dist*2.0));\r\n```\r\n\r\n5. Now the behavior is registered to the gameCore under the name \"chaseMe\"\r\n\r\n\r\n## Almost There\r\nNow, do you remember we created the objects in the previous page of the tutorial?\r\n\r\n#### THE MAGIC…!!!\r\n\r\n**All thats left to add is one single line**: evilface.addBehavior(\"chaseMe\");\r\n\r\n\r\n```javascript\r\n\r\n\tfor(i=0;i<10;i++){\r\n        for(j=0;j<10;j++){\r\n        var evilface = new Jasper.Object(\"evilface\");\r\n        evilface.setPos(i*50,j*50);\r\n        evilface.addBehavior(\"sprite\").setSprite(\"../img/evil.png\").setHeight(30).setWidth(30);\r\n        \r\n        evilface.addBehavior(\"chaseMe\");\r\n        \r\n        arenaLayer.addObject(evilface);\r\n        }\r\n    }\r\n    \r\n```\r\n\t\r\n###Presto!!!\r\nRun the game and run away as the minions chase after you until they eventually hit you or you run out the screen! \r\nThats not fair though… :( \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\t\t  \r\n\r\n\r\n\r\n###### Author : Jude Naveen Raj\r\n###### Organisation : Delta NITT\r\n","google":"UA-41766257-2","note":"Don't delete this file! It's used internally to help with page regeneration."}